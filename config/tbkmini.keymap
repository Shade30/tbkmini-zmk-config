/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick-tap-ms = <220>;
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

&mt {
    quick-tap-ms = <220>;
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc_left {
            timeout-ms = <50>;
            key-positions = <4 3>;
            bindings = <&kp ESC>;
        };

        combo_esc_right {
            timeout-ms = <50>;
            key-positions = <8 7>;
            bindings = <&kp ESC>;
        };

        combo_ret_left {
            timeout-ms = <50>;
            key-positions = <28 27>;
            bindings = <&kp RET>;
        };

        combo_ret_right {
            timeout-ms = <50>;
            key-positions = <32 31>;
            bindings = <&kp RET>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEF";
            /*
-------------------------------------------------------------------------------
|LGUI/]|  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  |RGUI/[|
|CTRL/`|  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |CTRL/'|
|LALT/\|  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  |RALT/-|
                   | RSE | SPC | LWR |   | LWR | BKSP| RSE |
*/

            bindings = <
&mt LGUI RBKT    &kp Q  &kp W  &kp E  &kp R        &kp T                                      &kp Y           &kp U        &kp I      &kp O    &kp P     &mt RGUI LBKT
&mt LCTRL GRAVE  &kp A  &kp S  &kp D  &kp F        &kp G                                      &kp H           &kp J        &kp K      &kp L    &kp SEMI  &mt RCTRL SQT
&mt LALT BSLH    &kp Z  &kp X  &kp C  &kp V        &kp B                                      &kp N           &kp M        &kp COMMA  &kp DOT  &kp FSLH  &mt RALT MINUS
                                      &lt RSE TAB  &mt LSHFT SPACE  &lt LWR RET  &lt LWR ESC  &mt RSHFT BSPC  &lt RSE DEL
            >;
        };

        lower_layer {
            label = "LWR";
            /*
-------------------------------------------------------------------------------------
|LGUI/TRM| F1  | F2 | F3  | F4  | F5  |    | F6  | F7  | F8  | F9  | F10 | RGUI/F11 |
| CTRL   |  !  |  @ |  #  |  $  |  %  |    |  ^  |  &  |  *  |  (  |  )  | CTRL/F12 |
| LALT/= |  1  |  2 |  3  |  4  |  5  |    |  6  |  7  |  8  |  9  |  0  | RALT/-   |
                    | ADJ | ___ | ___ |    | ___ | ___ | ADJ |
*/

            bindings = <
&mt LGUI LC(GRAVE)  &kp F1    &kp F2  &kp F3    &kp F4       &kp F5                       &kp F6     &kp F7       &kp F8    &kp F9    &kp F10   &mt RGUI F11
&kp LCTRL           &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR   &kp PERCENT                  &kp CARET  &kp AMPS     &kp STAR  &kp LPAR  &kp RPAR  &mt RALT F12
&mt LALT EQUAL      &kp N1    &kp N2  &kp N3    &kp N4       &kp N5                       &kp N6     &kp N7       &kp N8    &kp N9    &kp N0    &mt RALT MINUS
                                                &lt ADJ TAB  &trans       &trans  &trans  &trans     &lt ADJ DEL
            >;
        };

        raise_layer {
            label = "RSE";
            /*
----------------------------------------------------------------------------------------------
|LGUI/NUML|K *  |K 7 |K 8  |K 9  |K +  |            | CAPS | HOME | PSCR| PGUP | ___  | RGUI |
| CTRL/+  |K /  |K 4 |K 5  |K 6  |K -  |            | LEFT | DOWN | UP  | RGHT | INS  | CTRL |
| LALT/=  |K 0  |K 1 |K 4  |K 3  |K .  |            | SLCK | END  |PAUSE| PGDN | MENU | RALT |
                   | ___ | ___  | ADJ  |            | ADJ  | ___  | ___ |
*/

            bindings = <
&mt LGUI KP_NUM    &kp KP_MULTIPLY  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_PLUS                             &kp CAPS  &kp HOME  &kp PSCRN        &kp PG_UP  &none       &kp RGUI
&mt LCTRL KP_PLUS  &kp KP_DIVIDE    &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_MINUS                            &kp LEFT  &kp DOWN  &kp UP           &kp RIGHT  &kp INSERT  &kp RCTRL
&mt LALT EQUAL     &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT                              &kp SLCK  &kp END   &kp PAUSE_BREAK  &kp PG_DN  &kp K_APP   &kp RALT
                                                          &trans     &trans        &lt ADJ RET  &lt ADJ ESC  &trans    &trans
            >;
        };

        adjust_layer {
            label = "ADJ";
            /*
----------------------------------------------------------------------------------------------
| BLDR |OUT TG|     | STUD|     |     |   |        |        |       |        |        | RGUI |
| BTCLR| BT0  | BT1 | BT2 | BT3 | BT4 |   |        |MS LEFT | MS UP |MS RIGHT|MS WH UP| CTRL |
|pwrOFF|sftOFF|     |     |     |     |   |MIDL CLK|MS WH LT|MS DOWN|MS WH RT|MS WH DN| RALT |
                    | ___ | ___ | ___ |   |LEFT CLK|        | RIGHT CLK|
*/

            bindings = <
&bootloader        &out OUT_TOG  &none         &studio_unlock  &none         &none                           &none     &none           &none           &none            &none           &kp RGUI
&bt BT_CLR         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4                    &none     &mmv MOVE_LEFT  &mmv MOVE_UP    &mmv MOVE_RIGHT  &msc SCRL_UP    &kp RCTRL
&ext_power EP_OFF  &soft_off     &none         &none           &none         &none                           &mkp MB3  &msc SCRL_LEFT  &mmv MOVE_DOWN  &msc SCRL_RIGHT  &msc SCRL_DOWN  &kp RALT
                                                               &trans        &trans        &trans  &mkp MB1  &none     &mkp MB2
            >;
        };
    };
};
